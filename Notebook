import java.util.*;
import java.util.stream.Collectors;

class Notebook {
    private String model;
    private int ram;
    private int hdd;
    private String os;
    private String color;

    public Notebook(String model, int ram, int hdd, String os, String color) {
        this.model = model;
        this.ram = ram;
        this.hdd = hdd;
        this.os = os;
        this.color = color;
    }

    public String getModel() {
        return model;
    }

    public int getRam() {
        return ram;
    }

    public int getHdd() {
        return hdd;
    }

    public String getOs() {
        return os;
    }

    public String getColor() {
        return color;
    }

    @Override
    public String toString() {
        return "Model: " + model + " | RAM: " + ram + "GB | HDD: " + hdd + "GB | OS: " + os + " | Color: " + color;
    }
}

public class NotebookStore {
    public static void main(String[] args) {
        Set<Notebook> notebooks = new HashSet<>();
        notebooks.add(new Notebook("HP Pavilion", 8, 512, "Windows 10", "Silver"));
        notebooks.add(new Notebook("Dell XPS", 16, 512, "Windows 11", "Black"));
        notebooks.add(new Notebook("MacBook Air", 8, 256, "macOS", "Silver"));

        Scanner scanner = new Scanner(System.in);

        Map<String, Object> filters = new HashMap<>();
        System.out.println("Filter options:");
        System.out.println("1 - RAM (GB)");
        System.out.println("2 - HDD (GB)");
        System.out.println("3 - OS");
        System.out.println("4 - Color");

        System.out.print("Enter the filter criteria (e.g., '1 8' for RAM >= 8GB): ");
        String[] input = scanner.nextLine().split(" ");

        if (input.length % 2 != 0) {
            System.out.println("Invalid input format. Please enter pairs of filter criteria.");
            return;
        }

        for (int i = 0; i < input.length; i += 2) {
            String filterType = input[i];
            String filterValue = input[i + 1];
            filters.put(filterType, filterValue);
        }

        List<Notebook> filteredNotebooks = notebooks.stream()
                .filter(notebook -> {
                    boolean match = true;
                    for (Map.Entry<String, Object> entry : filters.entrySet()) {
                        switch (entry.getKey()) {
                            case "1": // RAM filter
                                int minRam = Integer.parseInt(entry.getValue().toString());
                                if (notebook.getRam() < minRam) {
                                    match = false;
                                }
                                break;
                            case "2": // HDD filter
                                int minHdd = Integer.parseInt(entry.getValue().toString());
                                if (notebook.getHdd() < minHdd) {
                                    match = false;
                                }
                                break;
                            case "3": // OS filter
                                String osFilter = entry.getValue().toString();
                                if (!notebook.getOs().equalsIgnoreCase(osFilter)) {
                                    match = false;
                                }
                                break;
                            case "4": // Color filter
                                String colorFilter = entry.getValue().toString();
                                if (!notebook.getColor().equalsIgnoreCase(colorFilter)) {
                                    match = false;
                                }
                                break;
                            default:
                                System.out.println("Invalid filter criteria.");
                                return false;
                        }
                    }
                    return match;
                })
                .collect(Collectors.toList());

        if (filteredNotebooks.isEmpty()) {
            System.out.println("No notebooks match the filter criteria.");
        } else {
            System.out.println("Filtered Notebooks:");
            filteredNotebooks.forEach(System.out::println);
        }
    }
}
